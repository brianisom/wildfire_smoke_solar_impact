---
title: "Panel Analysis of the impact of WF Smoke on Solar Gen: West US 2013-2020"
output: 
  html_document: default
  md_document:
    variant: markdown_github
---

R Markdown cheat sheet: https://www.rstudio.com/blog/the-r-markdown-cheat-sheet/

Use "?rmarkdown::_________" to look up formatting options for the YAML
header. For example, "?rmarkdown::html_document" will provide potential options
for html documents. More info on Rmarkdown anatomy can be found at
https://bookdown.org/yihui/rmarkdown-cookbook/rmarkdown-anatomy.html

Short guide to chunk options: https://bookdown.org/yihui/rmarkdown/r-code.html


#Cleaning and Combining the Data


Solar powerplant characteristics:
Download EIA form 860 data from https://www.eia.gov/electricity/data/eia860/

Monthly plant-level generation data
Download EIA for 923 data from https://www.eia.gov/electricity/data/eia923/

Install and load packages

```{r, include=FALSE}

library(easypackages)
libraries("readxl","ggplot2","stringr","rlist","data.table","DBI","RSQLite",  
          "stargazer","Hmisc","magrittr","formattable","RPostgreSQL", 
          "tidyverse","dbplyr","pbapply","stargazer","quantreg","olsrr", 
          "faraway","binaryLogic","sf","caret","Amelia","maps", 
          "tidycensus","reshape","boot","biglm","tigris","summarytools",
          "dplyr","fs", "httr","jsonlite","purrr")

options(scipen=999)
```

##Monthly Solar Generation

Data for monthly solar generation is collected via the US Energy Information Agency's Open Data Application Programming Interface (API): https://www.eia.gov/opendata/

EIA APIv2 technical documentation: https://www.eia.gov/opendata/documentation.php

```{r Retrieve monthly net generation via EIA's API}

#Define key parameters
EIAkey <- "iPjXaaJSiyfWNALV62yg1Onb0VTuUgVHa0eVHgbx"
startdate <- "2013-01"
enddate <- "2020-12"
frequency <- "monthly"
data <- "generation"
#plantCode <- ""
fuel2002 <- "SUN"
primeMover <- "PV"
state <- c("AZ","CA","CO","ID","MT","NM","NV","OR","TX","UT","WA","WY")
sortby <- "plantCode"

j=0
for(i in 1:12) {
  
  url <- 
    paste("https://api.eia.gov/v2/electricity/facility-fuel/data?api_key=",EIAkey,
          "&frequency=",frequency,
          "&start=",startdate,
          "&end=",enddate,
          "&data[]=",data,
          "&facets[state][]=",state[i],
          "&facets[fuel2002][]=",fuel2002,
          "&facets[primeMover][]=",primeMover,
          "&sort[0][column]=",sortby,
          "&sort[0][direction]=asc",
          "&length=999999",
          sep = "")

  response <- GET(url)

  plant_gen_json <- fromJSON(rawToChar(response$content))
  
  plant_gen_df <- data.frame(plant_gen_json$response$data)
  
    if (j == 0){
    plant_gen <- plant_gen_df
   }
    else{
      plant_gen <- rbind(plant_gen, plant_gen_df)
    }
  
  j = j+1

}

```

```{r Retrieve plant characteristics via EIA's API}

#Define key parameters
EIAkey <- "iPjXaaJSiyfWNALV62yg1Onb0VTuUgVHa0eVHgbx"
fuel2002 <- "SUN"
primeMover <- "PV"
plantid <- plant_gen$plantCode
sortby <- "plantid"
obsdate <- plant_gen$period

j=0
for(i in 1:52756) {
  
  url2 <- 
    paste("https://api.eia.gov/v2/electricity/operating-generator-capacity/data?api_key=",EIAkey,
          "&data[]=county",
          "&data[]=latitude",
          "&data[]=longitude",
          "&data[]=nameplate-capacity-mw",
          "&data[]=operating-year-month",
          "&facets[plantid][]=",plantid[i],
          "&facets[energy_source_code][]=",fuel2002, 
          "&facets[prime_mover_code][]=",primeMover,
          "&sort[0][column]=",sortby,
          "&sort[0][direction]=asc",
          "&start=",obsdate[i],
          "&length=1",
          sep = "")

  response_char <- GET(url2)

  plant_char_json <- fromJSON(rawToChar(response_char$content))
  
  plant_char_df <- data.frame(plant_char_json$response$data)
  
    if (j == 0){
    plant_char <- plant_char_df
   }
    else{
      plant_char <- rbind(plant_char, plant_char_df)
    }
  
  j = j+1

}

```
```{r Retrieve plant characteristics via EIA's API purrr}

#Define key parameters
EIAkey <- "iPjXaaJSiyfWNALV62yg1Onb0VTuUgVHa0eVHgbx"
fuel2002 <- "SUN"
primeMover <- "PV"
plantid <- plant_gen$plantCode
sortby <- "plantid"
obsdate <- plant_gen$period

call_plant_char <- function(.x,.y){

  url2 <- paste("https://api.eia.gov/v2/electricity/operating-generator-capacity/data?api_key=",EIAkey,
                "&data[]=county",
                "&data[]=latitude",
                "&data[]=longitude",
                "&data[]=nameplate-capacity-mw",
                "&data[]=operating-year-month",
                "&facets[plantid][]=",.x,
                "&facets[energy_source_code][]=",fuel2002, 
                "&facets[prime_mover_code][]=",primeMover,
                "&sort[0][column]=",sortby,
                "&sort[0][direction]=asc",
                "&start=",.y,
                "&length=1",
                sep = "")

  response_char <- GET(url2)

  plant_char_json <- fromJSON(rawToChar(response_char$content))
  
  plant_char_df <- data.frame(plant_char_json$response$data)

  return(plant_char_df)
}

plant_char <-   map2_dfr(.x=plantid, .y=obsdate, .f=call_plant_char)

```

```{r}

#Call multiple series using a for loop
j = 0
for(i in plantID.AZ$Plant.Id) {
  
  url <- 
    paste("https://api.eia.gov/series/?api_key=",EIAkey,
          "&series_id=ELEC.PLANT.GEN.",i,"-SUN-PV.M",sep = ""
               )
  
  res <- GET(url)
  
  json_data.AZ <- fromJSON(rawToChar(res$content), flatten = TRUE
                        )
  APIdata.AZ <- data.frame(json_data.AZ$series$data)
  
  #Create new columns to organize the data we want
  APIdata.AZ$Year <- substr(APIdata.AZ$X1,1,4) 
  APIdata.AZ$Month <- substr(APIdata.AZ$X1,5,6)
  APIdata.AZ$Day <- 1
  APIdata.AZ$Date <- as.Date(paste(APIdata.AZ$Year, APIdata.AZ$Month, APIdata.AZ$Day, sep="-"))
  colnames(APIdata.AZ)[2] <- word(json_data.AZ$series$name, 1, sep = fixed(":"))
  #APIdata.AZ$Lat <- json_data.AZ$series$lat
  #APIdata.AZ$Lon <- json_data.AZ$series$lon
  
  APIdata.AZ <- APIdata.AZ[-c(1,5)]
  
  if (j == 0){
    APIdata.AZ.final <-APIdata.AZ
  }
  else{
    APIdata.AZ.final <- merge(APIdata.AZ.final, APIdata.AZ, by="Date")
  }
  
  j = j+1
}

#APIdata.AZ.final <- subset(APIdata.AZ.final, Date>= startdate & Date <= enddate)

write.csv(APIdata.AZ.final,"temp/APIdata.AZ.csv")
write.csv(json_data.AZ,"temp/json_data.AZ.csv")
```

Import 860 data from 2___Plant_Yyyyy and 3_3_Solar_Yyyyy (only operable plants)

```{r}

plant2020 <- read.csv("data/raw/form_860/EIA860_2020_plant.csv")

solar2020 <- read.csv("data/raw/form_860/EIA860_2020_solar.csv")

```

Remove unnecessary columns from plant2020

```{r}

plant2020 <- subset(plant2020, select = c(Plant.Code,
                                          Plant.Name,
                                          Street.Address,
                                          City,
                                          State,
                                          Zip,
                                          County,
                                          Latitude,
                                          Longitude
))

```
Combine form 860 data using Plant Id

```{r, eval=FALSE}

plantchar2020 <- inner_join(x = solar2020, y = plant2020, by = "Plant.Code")

```

Remove unwanted info by creating a subset of imported data

Check if new joined dataset is matched correctly. If utility IDs and counties match,then duplicates are removed and a simpler dataset is created.

```{r, eval=FALSE}

if(all(plantchar2020$Utility.ID.x == plantchar2020$Utility.ID.y)
   &(all(plantchar2020$County.x == plantchar2020$County.y))
    ){simple_plantchar2020 <- plantchar2020[!duplicated(as.list(plantchar2020))]
    }else print("MISMATCH")

```

Remove unwanted columns

```{r, eval=FALSE}

plantchar2020 <- subset(plantchar2020, 
                        select = -c(Ash.Impoundment., 
                                    Ash.Impoundment.Lined.,
                                    Ash.Impoundment.Status, 
                                    Natural.Gas.LDC.Name,
                                    Natural.Gas.Pipeline.Name.1, 
                                    Natural.Gas.Pipeline.Name.2,
                                    Natural.Gas.Pipeline.Name.3, 
                                    Pipeline.Notes,
                                    Natural.Gas.Storage,
                                    Liquefied.Natural.Gas.Storage
))

```

Import form 923 generation data for years 2013-2020:

Create a vector for each file name
(NOTE: THE 2013 DATA HAS SLIGHTLY DIFFERENT COLUMN HEADINGS, I CHANGED THEM
MANUALLY IN EXCEL TO MATCH 2014-2020)

```{r}

form923_paths <- fs::dir_ls("data/raw/form_923")
form923_paths

```

Write a loop that will read in all files

```{r}

list_form923 <- list()

for (i in seq_along(form923_paths)) {
    list_form923[[i]] <- read.csv(
      file = form923_paths[[i]], fileEncoding = 'UTF-8-BOM'
    )
}

list_form923 <- set_names(list_form923, form923_paths)

```

Eliminate all non-utility and non-solar generation from each

```{r}

pvlist_form923 <- lapply(list_form923, function(x)
                         filter(x, NAICS.Code == "22",
                                Reported.Prime.Mover == "PV"))

```

Get rid of unnecessary columns of data

```{r}

simplepvlist_form923 <- lapply(pvlist_form923, function(x)
                              subset(x, select = c(Plant.Id, 
                                                   Plant.Name, 
                                                   Plant.State, 
                                                   Census.Region, 
                                                   NERC.Region, 
                                                   Netgen.January, 
                                                   Netgen.February,	
                                                   Netgen.March, 
                                                   Netgen.April,	
                                                   Netgen.May, 
                                                   Netgen.June,	
                                                   Netgen.July, 
                                                   Netgen.August,	
                                                   Netgen.September,	
                                                   Netgen.October,	
                                                   Netgen.November,	
                                                   Netgen.December,	
                                                   YEAR)))

```

Combine each annual form 923  data set to form one complete table 

```{r}

monthlygen <- simplepvlist_form923 %>% reduce(full_join, by="Plant.Id")
write.csv(monthlygen, "temp/monthlygen.csv")

```

Combine form 923 data with form 860 data by matching plant code with plant id

```{r}

monthlygen2 <- left_join(x = monthlygen, y = plant2020, by = c("Plant.Id" = "Plant.Code"))
write.csv(monthlygen2, "temp/monthlygen2.csv")

```

Attempt to convert from wide to long

```{r, eval=FALSE}

setDT(monthlygen2)
longmonthlygen <- melt(monthlygen2, id.vars=c("County"))
write.csv(longmonthlygen, "temp/longmonthlygen.csv")

```

Remove duplicates created by multiple generator ids

```{r, eval=FALSE}

spv2020data <- distinct(pv2020data, Plant.Id, .keep_all = TRUE)

```

Remove unnecessary data columns

```{r, eval=FALSE}

cpv2020data <- subset(spv2020data, select = c(Plant.Id, Plant.Name,
                                             Census.Region, NERC.Region.x,
                                             Respondent.Frequency, Netgen.January,	
                                             Netgen.February,	Netgen.March,	Netgen.April,	
                                             Netgen.May,	Netgen.June,	Netgen.July,	
                                             Netgen.August,	Netgen.September,	Netgen.October,	
                                             Netgen.November,	Netgen.December,	
                                             YEAR,	State.x,
                                             County.x,	Generator.ID,	Status,
                                             Nameplate.Capacity..MW.,	
                                             Operating.Year,	Street.Address,	
                                             City,	Zip,	Latitude,	Longitude))

```

Set cpv2020data as a data table

```{r, eval=FALSE}

setDT(cpv2020data)

```

Convert data from wide to long form

```{r, eval=FALSE}

Wide2020 <- melt(cpv2020data,
                 measure.vars = c("Netgen.January",	"Netgen.February","Netgen.March",	
                                  "Netgen.April",	"Netgen.May",	"Netgen.June","Netgen.July",	
                                  "Netgen.August","Netgen.September","Netgen.October",	
                                  "Netgen.November",	"Netgen.December"),
                 variable.name = "Month",
                 value.name = "Generation")

```